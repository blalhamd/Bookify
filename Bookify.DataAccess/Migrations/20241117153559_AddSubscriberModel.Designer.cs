// <auto-generated />
using System;
using Bookify.DataAccess.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookify.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241117153559_AddSubscriberModel")]
    partial class AddSubscriberModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("SerialNumber", "Shared")
                .StartsAt(10000001L)
                .IncrementsBy(2);

            modelBuilder.Entity("Bookify.Entities.entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("Name", "GovernorateId")
                        .IsUnique();

                    b.ToTable("Areas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(4236),
                            GovernorateId = 1,
                            IsDeleted = false,
                            Name = "Area 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(4287),
                            GovernorateId = 2,
                            IsDeleted = false,
                            Name = "Area 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(4290),
                            GovernorateId = 3,
                            IsDeleted = false,
                            Name = "Area 3"
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6034),
                            IsDeleted = false,
                            Name = "Taha Hussien",
                            Nationality = "Egypt"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6041),
                            IsDeleted = false,
                            Name = "Naguib Mahfouz",
                            Nationality = "Egypt"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6044),
                            IsDeleted = false,
                            Name = "Mahmoud Darwish",
                            Nationality = "Palestine"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6047),
                            IsDeleted = false,
                            Name = "Khalil Gibran",
                            Nationality = "Lebanon"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6051),
                            IsDeleted = false,
                            Name = "Adonis",
                            Nationality = "Syria"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6056),
                            IsDeleted = false,
                            Name = "Hanan al-Shaykh",
                            Nationality = "Lebanon"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6059),
                            IsDeleted = false,
                            Name = "Ahlam Mosteghanemi",
                            Nationality = "Algeria"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6062),
                            IsDeleted = false,
                            Name = "Ibrahim Nasrallah",
                            Nationality = "Palestine"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6065),
                            IsDeleted = false,
                            Name = "Hanan al-Shaykh",
                            Nationality = "Lebanon"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6069),
                            IsDeleted = false,
                            Name = "Nawal El Saadawi",
                            Nationality = "Egypt"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6073),
                            IsDeleted = false,
                            Name = "Yasmina Khadra",
                            Nationality = "Algeria"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6076),
                            IsDeleted = false,
                            Name = "Salman Rushdie",
                            Nationality = "India"
                        },
                        new
                        {
                            Id = 13,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6079),
                            IsDeleted = false,
                            Name = "Orhan Pamuk",
                            Nationality = "Turkey"
                        },
                        new
                        {
                            Id = 14,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6082),
                            IsDeleted = false,
                            Name = "Elif Shafak",
                            Nationality = "Turkey"
                        },
                        new
                        {
                            Id = 15,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 663, DateTimeKind.Local).AddTicks(6085),
                            IsDeleted = false,
                            Name = "Amitav Ghosh",
                            Nationality = "India"
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailableForRental")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Title", "AuthorId")
                        .IsUnique();

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2766),
                            Description = "A sweeping saga of a family in Cairo during the early 20th century.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/cairo_trilogy.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 150m,
                            PublishedOn = new DateTime(1956, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "The Cairo Trilogy",
                            Type = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2778),
                            Description = "The first book in the Cairo Trilogy, focusing on family life in Cairo.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/palace_walk.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 120m,
                            PublishedOn = new DateTime(1956, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "Palace Walk",
                            Type = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2815),
                            Description = "A postcolonial narrative exploring identity and belonging.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/season_of_migration.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 130m,
                            PublishedOn = new DateTime(1966, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "Season of Migration to the North",
                            Type = "Fiction"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2820),
                            Description = "A collection of poetic essays covering various aspects of life.",
                            Hall = "Poetry Section",
                            ImageUrl = "https://example.com/the_prophet.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 90m,
                            PublishedOn = new DateTime(1923, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "The Prophet",
                            Type = "Poetry"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 4,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2824),
                            Description = "A historical novel set in Egypt and America, intertwining love stories.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/map_of_love.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 140m,
                            PublishedOn = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "The Map of Love",
                            Type = "HistoricalFiction"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 5,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2830),
                            Description = "A novel set in a once-grand building in downtown Cairo.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/yacoubian_building.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 110m,
                            PublishedOn = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "The Yacoubian Building",
                            Type = "Fiction"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 6,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2834),
                            Description = "A poignant coming-of-age story set in Egypt.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/open_door.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 100m,
                            PublishedOn = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "The Open Door",
                            Type = "Fiction"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 7,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2839),
                            Description = "A novel that blends Eastern and Western philosophies.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/book_of_khalid.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 85m,
                            PublishedOn = new DateTime(1911, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "The Book of Khalid",
                            Type = "Fiction"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 8,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2843),
                            Description = "An exploration of spirituality and identity.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/return_of_the_spirit.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 125m,
                            PublishedOn = new DateTime(1933, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "The Return of the Spirit",
                            Type = "Fiction"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 9,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(2848),
                            Description = "A novel set in the Ottoman Empire, blending art and politics.",
                            Hall = "Main Hall",
                            ImageUrl = "https://example.com/my_name_is_red.jpg",
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            Price = 135m,
                            PublishedOn = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Publishing House",
                            Title = "My Name is Red",
                            Type = "Fiction"
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.BookCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            BookId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 3
                        },
                        new
                        {
                            CategoryId = 3,
                            BookId = 4
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 5
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 6
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 7
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 8
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 9
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 10
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.BookCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("int");

                    b.Property<int?>("FirstModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailableForRental")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR Shared.SerialNumber");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookCopies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 8, 9, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5379),
                            EditionNumber = 1,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 5, 1, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5388),
                            EditionNumber = 2,
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 9, 28, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5392),
                            EditionNumber = 1,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 6, 20, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5395),
                            EditionNumber = 2,
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 7, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5399),
                            EditionNumber = 1,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 6,
                            BookId = 3,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 10, 18, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5403),
                            EditionNumber = 2,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 7,
                            BookId = 4,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 9, 18, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5407),
                            EditionNumber = 1,
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 8,
                            BookId = 4,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 8, 19, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5410),
                            EditionNumber = 2,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 9,
                            BookId = 5,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 12, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5471),
                            EditionNumber = 1,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 10,
                            BookId = 5,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 10, 23, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5477),
                            EditionNumber = 2,
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 11,
                            BookId = 6,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 10, 13, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5480),
                            EditionNumber = 1,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 12,
                            BookId = 6,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 9, 3, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5484),
                            EditionNumber = 2,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 13,
                            BookId = 7,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 7, 20, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5487),
                            EditionNumber = 1,
                            IsAvailableForRental = false,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 14,
                            BookId = 7,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 5, 21, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5490),
                            EditionNumber = 2,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        },
                        new
                        {
                            Id = 15,
                            BookId = 8,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 5, 1, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(5493),
                            EditionNumber = 1,
                            IsAvailableForRental = true,
                            IsDeleted = false,
                            SerialNumber = 0
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(7410),
                            IsDeleted = false,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(7432),
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = 1,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(7436),
                            IsDeleted = false,
                            Name = "Fiction"
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Governorates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(8975),
                            IsDeleted = false,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(8988),
                            IsDeleted = false,
                            Name = "Giza"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 664, DateTimeKind.Local).AddTicks(8990),
                            IsDeleted = false,
                            Name = "Beni Suef"
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "UserManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "5880A236-CEC4-4463-941A-47F6DD9873A3",
                            CreatedOn = new DateTime(2024, 11, 17, 15, 35, 58, 665, DateTimeKind.Utc).AddTicks(782),
                            IsDefault = false,
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "5880A236-F389-4541-BBA4-7CD4EB900950",
                            CreatedOn = new DateTime(2024, 11, 17, 15, 35, 58, 665, DateTimeKind.Utc).AddTicks(810),
                            IsDefault = true,
                            IsDeleted = false,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users", "UserManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "A4FEA470-1B47-4011-9A71-FE3AD504CE6A",
                            CreatedOn = new DateTime(2024, 11, 17, 17, 35, 58, 665, DateTimeKind.Local).AddTicks(3205),
                            Email = "blalhamd48@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            IsDeleted = false,
                            IsDisabled = false,
                            LastName = "Sayed",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLALHAMD48@GMAIL.COM",
                            NormalizedUserName = "BLALHAMD48",
                            PasswordHash = "AQAAAAIAAYagAAAAECdeHxQ0eD2Y4fvEnAquGyT/uxHvJvoheCkpYbTaLZ/vRjO5ceH/eg35BjEhVwaZMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1D32688429B44DD296E29A64DDB76779",
                            TwoFactorEnabled = false,
                            UserName = "blalhamd48"
                        });
                });

            modelBuilder.Entity("Bookify.Entities.entities.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<bool>("HasWhatsApp")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlackListed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModificationByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Subscribers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Elm St Apt 4B",
                            AreaId = 1,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 732, DateTimeKind.Local).AddTicks(4477),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            GovernorateId = 1,
                            HasWhatsApp = true,
                            ImageUrl = "https://example.com/johndoe.jpg",
                            IsBlackListed = false,
                            IsDeleted = false,
                            LastName = "Doe",
                            NationalId = "12345678901234",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak St Unit 12",
                            AreaId = 2,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 732, DateTimeKind.Local).AddTicks(4533),
                            DateOfBirth = new DateTime(1985, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            Gender = "Female",
                            GovernorateId = 1,
                            HasWhatsApp = false,
                            ImageUrl = "https://example.com/janesmith.jpg",
                            IsBlackListed = false,
                            IsDeleted = false,
                            LastName = "Smith",
                            NationalId = "23456789012345",
                            Phone = "987-654-3210"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine St House 10",
                            AreaId = 1,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 732, DateTimeKind.Local).AddTicks(4538),
                            DateOfBirth = new DateTime(1992, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.j@example.com",
                            FirstName = "Alice",
                            Gender = "Female",
                            GovernorateId = 2,
                            HasWhatsApp = true,
                            ImageUrl = "https://example.com/alicejohnson.jpg",
                            IsBlackListed = true,
                            IsDeleted = false,
                            LastName = "Johnson",
                            NationalId = "34567890123456",
                            Phone = "555-555-5555"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Maple St Villa 3",
                            AreaId = 3,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 732, DateTimeKind.Local).AddTicks(4541),
                            DateOfBirth = new DateTime(1980, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            Gender = "Male",
                            GovernorateId = 2,
                            HasWhatsApp = false,
                            ImageUrl = "https://example.com/bobbrown.jpg",
                            IsBlackListed = false,
                            IsDeleted = false,
                            LastName = "Brown",
                            NationalId = "45678901234567",
                            Phone = "444-444-4444"
                        },
                        new
                        {
                            Id = 5,
                            Address = "321 Maple St Villa 4",
                            AreaId = 2,
                            CreatedByUserId = 0,
                            CreationTime = new DateTime(2024, 11, 17, 17, 35, 58, 732, DateTimeKind.Local).AddTicks(4545),
                            DateOfBirth = new DateTime(1995, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charlie.d@example.com",
                            FirstName = "Charlie",
                            Gender = "Male",
                            GovernorateId = 3,
                            HasWhatsApp = true,
                            ImageUrl = "https://example.com/charliedavis.jpg",
                            IsBlackListed = false,
                            IsDeleted = false,
                            LastName = "Davis",
                            NationalId = "56789012345678",
                            Phone = "222-222-2222"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "UserManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "permissions",
                            ClaimValue = "Roles:GetAll",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "permissions",
                            ClaimValue = "Roles:Add",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "permissions",
                            ClaimValue = "Roles:Update",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "permissions",
                            ClaimValue = "Roles:Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "permissions",
                            ClaimValue = "Users:GetAll",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "permissions",
                            ClaimValue = "Users:Add",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "permissions",
                            ClaimValue = "Users:Update",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "permissions",
                            ClaimValue = "Users:Delete",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "UserManagement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "UserManagement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "UserManagement");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "UserManagement");
                });

            modelBuilder.Entity("Bookify.Entities.entities.Area", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Governorate", "Governorate")
                        .WithMany("Areas")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Bookify.Entities.entities.Book", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Bookify.Entities.entities.BookCategory", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Book", "Book")
                        .WithMany("Categories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookify.Entities.entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bookify.Entities.entities.BookCopy", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Book", "Book")
                        .WithMany("Copies")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Bookify.Entities.entities.Subscriber", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookify.Entities.entities.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookify.Entities.entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Bookify.Entities.entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bookify.Entities.entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookify.Entities.entities.Book", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Copies");
                });

            modelBuilder.Entity("Bookify.Entities.entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookify.Entities.entities.Governorate", b =>
                {
                    b.Navigation("Areas");
                });
#pragma warning restore 612, 618
        }
    }
}
